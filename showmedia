#!/bin/bash +xn
# reorgmedia
# author: lv913
# email:  liv913@gmail.com
# date:   06/Oct/2019

VERSION=1.5

WORKINGDIR="$HOME/.reorgmedia"

declare -A CFG
CFG["INPUTFILE"]=""
CFG["INDIR"]=""
CFG["OUTDIR"]=""
CFG["WORKFILE"]=$WORKINGDIR/displayout.list
CFG["PATTERN"]="*"
CFG["COMPARE"]=NO
CFG["EQUALS"]=NO
CFG["NEQUALS"]=NO
CFG["COL1"]=NO
CFG["COL2"]=NO

VIDEOEXT=( mp4 avi mov mkv mpg webm )

_usage() {
# Utilizzo...

cat <<EOF
  showmedia v$VERSION

  Utilizzo: showmedia [-i DIR] [-o DIR] [-f FILE] [-e|-n] [-1|-2] [OPZIONI]

  Analizza i file nella directory specificata con -i o con -o, oppure esegue il confronto
  se sono specificate entrambe.
  Se presente il parametro -f, verrà analizzato uno specifico file invece delle directory.
  Se non viene specificato nessuno dei parametri -i, -o o -f, verrà analizzato (se presente)
  l'ultimo log generato.

  OPZIONI:
    -1              Visualizza i soli nomi dei file presenti nella prima directory d'analisi.
    -2              Visualizza i soli nomi dei file presenti nella prima directory d'analisi.
    -e              Visualizza i soli file uguali.
    -f FILE         Stampa in formato colonnare i dati contenuti nel 
                    csv FILE, invece che cercare nelle directory. 
                    In questo caso sono scartati i parametri -i, -o, 
                    -P e -w.
    -h              Visualizza questa guida.
    -i DIR          Specifica la prima directory d'analisi.
    -n              Visualizza i soli file differenti.
    -o DIR          Specifica la seconda directory d'analisi.
    -P PATTERN      Specifica il pattern dei file da includere.
                    Default: *
    -V              Visualizza la versione corrente dello script.
    -w FILE         Salva su un file di output i risultati.

  UTILIZZO FILE DI OUTPUT
    Visualizza su colonne un elenco su file:
    $ ./showmedia -f displayout.list

    Genera un elenco dei valori della colonna 2 se manca il valore sulla colonna 3:
    $ awk -F ";" '{if (!length(\$3)){print \$2}}' displayout.list

    Copio i file in colonna 2 se manca il valore sulla colonna 3:
    $ awk -F ";" '{if (!length(\$3)){print \$2}}' displayout.list | while read f; do cp "\$FROM/\$f" "\$TO"; done

EOF
}

# containsElement: verifica se un elemento è incluso in un array
# es. AR=( mp4 avi mov mkv mpg webm )
#     if [ `containsElement mp4 ${AR[@]}` -eq 1 ]; then echo ok; fi -> 'ok'
function containsElement { local e match="$1"; shift; for e; do [[ "$e" == "$match" ]] && echo 0 && return 0; done; echo 1 && return 1; }

_print() {
  V=$*
  if [ "$#" -eq "1" ]; then
    printf "%s\n" "$1"
  elif [ "$#" -eq "0" ]; then
    printf "\\n"
  else
    printf "$@"
  fi
}

_cfg() {
  # Imposta il valore di configurazione $2 sulla chiave $1
  CFG["$1"]=$2
}

_cfgprint() {
  for i in "${!CFG[@]}"; do
    printf "CFG[$i]=${CFG[$i]} "
  done 
}

# To be kept synchronized with the equivalent function in reorgmedia
_get_file_createdate() {
  # Estrae la data di creazione in base a vari criteri
  # Campi in input: SPEC (opzionalmente vuoto) e FILE (nome file inclusivo di path)
  local SPEC=$1
  local FILE=$2

  if [ -z "$SPEC" ]; then
    SPEC=$(exiftool -f -s -csv -d "%Y-%m-%d %H:%M:%S" -CreateDate -Model -Make -DateTimeOriginal "$CURFILE" | grep -v SourceFile)
  fi

  local EXT=""
  if [[ "$FILE" =~ \.([A-Za-z 0-9]*)$ ]]; then
    EXT=$(echo "${BASH_REMATCH[1]}" | tr '[:upper:]' '[:lower:]')
  fi
  local SHORTNAME=$(basename "$FILE")
  local DATE
  # CreateDate:
  DATE=$(echo ${SPEC} | cut -d , -f 2 -s | sed 's/^-$//')
    if [ "$DATE" == "" ]; then
      DATE=$(echo ${SPEC} | cut -d , -f 5 -s | sed 's/^-$//')
    fi

  if [ -z "$DATE" ] || [[ "$DATE" =~ ^0000.* ]]; then
    if [[ ("$EXT" == "mpg" && "$SHORTNAME" =~ M2U[0-9]+) || "$EXT" == "webm" || "$EXT" == "jpg" ]]; then
      # viene dalla videocamera o dalla webcam; prendo per buona la data di ultima modifica
      DATE=$(stat -c %y "$FILE" | cut -d '.' -f 1)
    else
      DATE="2001-01-01 00:00:00"
    fi
  fi

  echo "$DATE"
}

_list() {
  # Crea la lista dei file e data di creazione su un file
  local DIR=$1
  local FILE=$2
  local FILETMP="$FILE.tmp"

  truncate -s 0 "$FILE"
  truncate -s 0 "$FILETMP"
  echo "$DIR;Date;Dur;Make;Model" >> "$FILE"

  find -L "$DIR" -maxdepth 1 -type f -iname "${CFG["PATTERN"]}" | sort | while read f
  do
    local FILENAME=$(basename "$f")
    #local EXT=$(echo $FILENAME | cut -d '.' -f2 | tr '[:upper:]' '[:lower:]')
    local EXT=""
    if [[ "$FILENAME" =~ \.([A-Za-z 0-9]*)$ ]]; then
      EXT=$(echo "${BASH_REMATCH[1]}" | tr '[:upper:]' '[:lower:]')
    fi
    local SPEC=$(exiftool -f -s -csv -d "%Y-%m-%d %H:%M:%S" -CreateDate -Model -Make -DateTimeOriginal "$f" | grep -v SourceFile)
    local MAKE=$(echo ${SPEC}  | cut -d , -f 4 -s | sed 's/^-$//')
    local MODEL=$(echo ${SPEC} | cut -d , -f 3 -s | sed 's/^[" ]*//g' | sed 's/[" ]*$//g' | sed 's/G (4)/G4/' | sed 's/BlackBerry //' | sed 's/^-$//')
    local DATE=$(_get_file_createdate "$SPEC" "$f")
    local DURATION=""
    if [ $(containsElement "$EXT" "${VIDEOEXT[@]}") -eq 0 ]; then
      DURATION=$(exiftool -f -s3 -Duration -n "$f" | cut -d . -f 1 | sed 's/^-$//')
    fi

    echo "$FILENAME;$DATE;$DURATION;$MAKE;$MODEL" >> "$FILETMP"
  done
  sort -t ";" -k 2 "$FILETMP" >> "$FILE"
  rm "$FILETMP"
}

_column () {
  # Stampa la lista in $1 formattata per colonne
  local FILE=$1
  local PRINTFILE=${CFG["WORKFILE"]}.print
  if [[ "${CFG["EQUALS"]}" == "YES" ]]; then
    # soli elementi uguali
    _print "$(awk -F';' -v OFS=';' '{ if (NR==1 || $2=="x") print }' "$FILE")" > "$PRINTFILE"
  elif [[ "${CFG["NEQUALS"]}" == "YES" ]]; then
    # soli elementi diversi
    _print "$(awk -F';' -v OFS=';' '{ if (NR==1 || $2=="") print }' "$FILE")" > "$PRINTFILE"
  else
    # tutti gli elementi
    _print "$(cat "$FILE")" > "$PRINTFILE"
  fi
  if [[ "${CFG["COL1"]}" == "YES" ]]; then
    # soli nomi dei file prima directory di analisi
    _print "$(awk -F';' -v OFS=';' '{if (NR>1 && $3!="") print $3 }' "$PRINTFILE")" > "$PRINTFILE.tmp"
    mv "$PRINTFILE.tmp" "$PRINTFILE"
  elif [[ "${CFG["COL2"]}" == "YES" ]]; then
    # soli nomi dei file seconda directory di analisi
    _print "$(awk -F';' -v OFS=';' '{if (NR>1 && $5!="") print $5 }' "$PRINTFILE")" > "$PRINTFILE.tmp"
    mv "$PRINTFILE.tmp" "$PRINTFILE"
  fi
  _print "$(cat "$PRINTFILE" | column -s ";" -t -n)"
  rm "$PRINTFILE"
}

# Controllo parametri

optstring='f:i:o:P:Vw:en12h'
while getopts "$optstring" option
do
  case "${option}" in
  f) _cfg INPUTFILE "${OPTARG}";;
  i) _cfg INDIR "${OPTARG}";;
  o) _cfg OUTDIR "${OPTARG}";;
  w) _cfg OUTFILE "${OPTARG}";;
  P) _cfg PATTERN "${OPTARG}";;
  1) _cfg COL1 YES;;
  2) _cfg COL2 YES;;
  e) if [[ "${CFG["NEQUALS"]}" == "YES" ]]; then _print "Errore: sia -e che -n sono presenti"; exit 1; else _cfg EQUALS YES; fi;;
  n) if [[ "${CFG["EQUALS"]}" == "YES" ]]; then _print "Errore: sia -e che -n sono presenti"; exit 1; else _cfg NEQUALS YES; fi;;
  V) printf "\033[0;32m%s\033[0m\n" "showmedia v$VERSION"; exit 0;;
  h) _usage; exit 0 ;;
  esac
done
shift $((OPTIND - 1))

# INIZIO

if [[ "${CFG["COL1"]}" == "YES" ]] && [[ "${CFG["COL2"]}" == "YES" ]]; then
    _print "Non è possibile specificare sia -1 che -2."
    exit 1
fi
if [ -z "${CFG["INDIR"]}" ] && [ -z "${CFG["OUTDIR"]}" ] && [ -z "${CFG["INPUTFILE"]}" ]; then
  if [[ -n "${CFG["WORKFILE"]}" ]]; then
    # non è stato specificato nessuno fra -i, -o e -f; esiste il WORKFILE e uso quello
    _column "${CFG["WORKFILE"]}"
    exit 0
  else
    _print "Non è stato specificato nessuno fra -i, -o e -f e non esiste nessun log recente."
    exit 1
  fi
fi
if [ -n "${CFG["INPUTFILE"]}" ]; then
  if [ ! -f "${CFG["INPUTFILE"]}" ]; then
    _print "File non esistente: ${CFG["INPUTFILE"]}"
    exit 1
  fi
  _column "${CFG["INPUTFILE"]}"
  exit 0
fi
if [ -n "${CFG["INDIR"]}" ] && [ -n "${CFG["OUTDIR"]}" ]; then
  # COMPARE
  if [ ! -d "${CFG["INDIR"]}" ]; then
    _print "Directory non esistente: ${CFG["INDIR"]}"
    exit 1
  fi
  if [ ! -d "${CFG["OUTDIR"]}" ]; then
    _print "Directory non esistente: ${CFG["INDIR"]}"
    exit 1
  fi
  FILE1=$WORKINGDIR/displayout1.list
  FILE2=$WORKINGDIR/displayout2.list
  _list "${CFG["INDIR"]}" "$FILE1"
  sed '1d' -i "$FILE1"
  _list "${CFG["OUTDIR"]}" "$FILE2"
  sed '1d' -i "$FILE2"
  truncate -s 0 "${CFG["WORKFILE"]}"
  echo "Date;${CFG["INDIR"]};Dur;${CFG["OUTDIR"]};Dur;Make;Model" >> "${CFG["WORKFILE"]}"
  # Formato file in ingresso: $DIR;Date;Dur;Make;Model
  # concateno le liste:
  join -t ';' -j 2 -a 1 -a 2 -e "" -o 0,1.1,1.3,2.1,2.3,1.4,1.5 "$FILE1" "$FILE2" >> "${CFG["WORKFILE"]}"
  # riempio l'ultima colonna:
  awk -F';' -v OFS=';' '{$2=(NR==1 ? "Eq" : (( $3==$5 && $3!="" ) ? "x" : "")) FS $2;}1' "${CFG["WORKFILE"]}" > "${CFG["WORKFILE"]}".tmp
  mv "${CFG["WORKFILE"]}".tmp "${CFG["WORKFILE"]}"

  rm "$FILE1"
  rm "$FILE2"
  _column "${CFG["WORKFILE"]}"
  if [[ -n "${CFG["OUTFILE"]}" ]]; then
    cp "${CFG["WORKFILE"]}" "${CFG["OUTFILE"]}"
  fi
else
  # Provo con INDIR
  if [ -n "${CFG["INDIR"]}" ]; then
    if [ -d "${CFG["INDIR"]}" ]; then
      _list "${CFG["INDIR"]}" "${CFG["WORKFILE"]}"
      _column "${CFG["WORKFILE"]}"
      if [[ -n "${CFG["OUTFILE"]}" ]]; then
        cp "${CFG["WORKFILE"]}" "${CFG["OUTFILE"]}"
      fi
      exit 0
    else
      _print "Directory non esistente: ${CFG["INDIR"]}"
      exit 1
    fi
  fi
  # Provo con OUTDIR
  if [ -n "${CFG["OUTDIR"]}" ]; then
    if [ -d "${CFG["OUTDIR"]}" ]; then
      _list "${CFG["OUTDIR"]}" "${CFG["WORKFILE"]}"
      _column "${CFG["WORKFILE"]}"
      if [[ -n "${CFG["OUTFILE"]}" ]]; then
        cp "${CFG["WORKFILE"]}" "${CFG["OUTFILE"]}"
      fi
      exit 0
    else
      _print "Directory non esistente: ${CFG["OUTDIR"]}"
      exit 1
    fi
  fi

  # Se siamo qui, non è stata impostata alcuna directory
  _print "Non è stata impostata alcuna directory"
  exit 1

fi
